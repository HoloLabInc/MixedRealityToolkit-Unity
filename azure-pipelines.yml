# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- feature/mrtk_documentation_ja
- feature/mrtk_documentation_ja_docfx

pool:
  vmImage: 'windows-latest'

steps:
# Install the DocFX nuget package
- task: NuGetCommand@2
  displayName: 'Install DocFX'
  inputs:
    command: custom
    arguments: 'install docfx.console'

# Run DocFX to generate the user manual and API reference
- powershell: |
    # Find the folder where DocFX was installed; the path depends on the version
    $DocFxDir = Get-ChildItem | Where-Object {$_.PSIsContainer -eq $true -and $_.Name -match "docfx"} | Select-Object -first 1
    Write-Host "Using DocFX from '$DocFxDir/'."
    
    # Invoke docfx.exe to build the docs, and output both to console and to a variable $output
    $output = ""
    Invoke-Expression "$($DocFxDir.FullName)\tools\docfx.exe Documentation.ja\docfx.json -o docs -f" | Tee-Object -Variable output | Write-Host

    # # Check the console output stored in $output for any error or warning message,
    # # and force the task to fail if there is any.
    # $results = $output | Out-String
    # if ($results -match "(?<warningCount>\d*) Warning\(s\)\s*(?<errorCount>\d*) Error\(s\)")
    # {
    #   if ($Matches.errorCount -gt 0 -or $Matches.warningCount -gt 0)
    #   {
    #     Write-Host "##vso[task.complete result=Failed;]DONE"
    #   }
    # }
  displayName: 'Generate docs'

